#!/bin/bash
#
#  Command Line Interface to start all services associated with the Tutorial
#  For this tutorial the commands are merely a convenience script to run docker-compose
#

set -e

ORION="http://orion:1026/version"
CONTEXT="http://context/user-context.jsonld"
CORE_CONTEXT="https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.8.jsonld"

dockerCmd="docker compose"
if (( $# == 2 )); then
    dockerCmd="docker-compose"
fi

if (( $# < 1 )); then
	echo "Illegal number of parameters"
	echo "usage: services [create|orion|stop]"
	exit 1
fi

pause(){
	printf " "
	count="$1"
	[ "$count" -gt 59 ] && printf "Waiting one minute " || printf " Waiting a few seconds ";
	while [ "$count" -gt 0 ]
	do
		printf "."
		sleep 3
		count=$((count - 3))
	done
	echo ""
}

getHeartbeat(){
	eval "response=$(docker run --network fiware_default --rm quay.io/curl/curl:${CURL_VERSION} -s -o /dev/null -w "%{http_code}" "$1")"
}

waitForOrion () {
	echo -e "\n⏳ Waiting for \033[1;34mOrion-LD\033[0m to be available\n"
	
	while ! [ `docker inspect --format='{{.State.Health.Status}}' fiware-orion` == "healthy" ]
	do
		echo -e "\nContext Broker HTTP state: ${response} (waiting for 200)"
		pause 6
		getHeartbeat "${ORION}"
	done
}

waitForMongo () {
	echo -e "\n⏳ Waiting for \033[1mMongoDB\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' db-mongo` == "healthy" ]
	do 
		sleep 1
	done
}

stoppingContainers () {
	CONTAINERS=$(docker ps --filter "label=org.fiware=agri-data-platform" -aq)
	if [[ -n $CONTAINERS ]]; then 
		echo "Stopping containers"
		docker rm -f $CONTAINERS || true
	fi
	VOLUMES=$(docker volume ls -qf dangling=true) 
	if [[ -n $VOLUMES ]]; then 
		echo "Removing old volumes"
		docker volume rm $VOLUMES || true
	fi
	NETWORKS=$(docker network ls  --filter "label=org.fiware=agri-data-platform" -q) 
	if [[ -n $NETWORKS ]]; then 
		echo "Removing agri-data-platform networks"
		docker network rm $NETWORKS || true
	fi
}

displayServices () {
	echo ""
	docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter name="$1"

	echo ""
}

command="$1"
case "${command}" in
	"help")
        echo "usage: services [create|orion|stop]"
        ;;
	 "orion")
		export $(cat .env | grep "#" -v)
		stoppingContainers
		echo -e "Starting containers:  \033[1;34mOrion\033[0m, \033[1;34mQuantumLeap\033[0m, \033[1mCrateDB\033[0m and \033[1mMongoDB\033[0m databases."
		echo -e "- \033[1;34mOrion\033[0m is the context broker"
		echo -e "- \033[1;34mQuantumLeap\033[0m will write to CrateDB"
		echo -e "- Data models \033[1m@context\033[0m is supplied externally"
		echo ""
		${dockerCmd} -p fiware up -d --renew-anon-volumes
		displayServices "orion|fiware"
		waitForMongo
		waitForOrion
		echo -e "\033[1;34m${command}\033[0m is now running and exposed on localhost:${EXPOSED_PORT}"
		;;
	"stop")
		export $(cat .env | grep "#" -v)
		stoppingContainers
		;;
	"start")
		export $(cat .env | grep "#" -v)
		./services ${CONTEXT_BROKER:=orion} $2
 		;;
 	"create")
		export $(cat .env | grep "#" -v)
		echo "Pulling Docker images"
		docker pull -q quay.io/curl/curl:${CURL_VERSION}
		${dockerCmd} pull
		;;
	*)
		echo "Command not Found."
		echo "usage: services [create|orion|stop]"
		exit 127;
		;;
esac